---
layout: layout.njk
---

<div class="page-main__title page-main__title--event">
  <h1>JSNN #13</h1>
  <span class="page-main__status">Предстоящие</span>
</div>
<section class="page-main__nav">
  <ul class="event-navigation">
    <li>
      <a class="event-navigation__link event-navigation__link--active">Расписание</a>
    </li>
    <li>
      <a class="event-navigation__link" href="place-and-time.html">Место и время</a>
    </li>
    <li>
      <a class="event-navigation__link" href="#">Регистрация</a>
    </li>
  </ul>
</section>
<section class="page-main__content event-agenda">
  <ul class="event-agenda__list">
    <li class="event-agenda__item">
      <div class="event-agenda__time">
        <time class="event-agenda__time event-agenda__time--start">15:00</time>
        <time class="event-agenda__time event-agenda__time--end">15:30</time>
      </div>
      <div class="event-agenda__info">
        <h2 class="event-agenda__title">Роутер как у сына маминой подруги</h2>
        <p class="event-agenda__speaker"><span class="event-agenda__speaker-name">Павел Малышев</span> <span class="event-agenda__speaker-company">/ Must lab</span></p>
        <div class="event-agenda__description">
          <p>Когда мы разрабатываем веб-приложения, мы часто используем маршрутизатор. Каждый фреймворк имеет свой собственный, хотя все они используют одни и те же принципы. Или нет? Действительно ли существующие маршрутизаторы достаточно гибки, чтобы покрыть все кейсы веб-разработки? Или "танцы с бубном" - это неотъемлемая часть работы с маршрутизацией. Давайте ответим на все эти вопросы, сравнив различные маршрутизаторы, попутно разработав свой собственный подход.</p>
        </div>
      </div>
    </li>
    <li class="event-agenda__item event-agenda__item--break">
      <div class="event-agenda__time">
        <time class="event-agenda__time event-agenda__time--start">15:00</time>
        <time class="event-agenda__time event-agenda__time--end">15:30</time>
      </div>
      <div class="event-agenda__info">
        <h2 class="event-agenda__title">Перерыв</h2>
      </div>
    </li>
    <li class="event-agenda__item">
      <div class="event-agenda__time">
        <time class="event-agenda__time event-agenda__time--start">15:40</time>
        <time class="event-agenda__time event-agenda__time--end">16:30</time>
      </div>
      <div class="event-agenda__info">
        <h2 class="event-agenda__title">Пишем ESLint-правила</h2>
        <p class="event-agenda__speaker"><span class="event-agenda__speaker-name">Леонид Лебедев</span> <span class="event-agenda__speaker-company">/ Yandex</span></p>
        <div class="event-agenda__description">
          <p>Если стандартный набор правил не покрывает все ваши потребности, то нужно начать писать свои. В докладе расскажу зачем создают правила для ESLint, почему мы стали это делать, а также попробуем создать своё правило.</p>
        </div>
      </div>
    </li>
    <li class="event-agenda__item">
      <div class="event-agenda__time">
        <time class="event-agenda__time event-agenda__time--start">16:30</time>
        <time class="event-agenda__time event-agenda__time--end">17:30</time>
      </div>
      <div class="event-agenda__info">
        <h2 class="event-agenda__title">Жизнь до Runtime</h2>
        <p class="event-agenda__speaker"><span class="event-agenda__speaker-name">Николай Сидоров</span> <span class="event-agenda__speaker-company">/ Must lab</span></p>
        <div class="event-agenda__description">
          <p>Когда мы разрабатываем веб-приложения, мы часто используем маршрутизатор. Каждый фреймворк имеет свой собственный, хотя все они используют одни и те же принципы. Или нет? Действительно ли существующие маршрутизаторы достаточно гибки, чтобы покрыть все кейсы веб-разработки? Или "танцы с бубном" - это неотъемлемая часть работы с маршрутизацией. Давайте ответим на все эти вопросы, сравнив различные маршрутизаторы, попутно разработав свой собственный подход.</p>
        </div>
      </div>
    </li>
  </ul>
</section>
